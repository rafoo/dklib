#REQUIRE cc.
#REQUIRE dk_bool.
#REQUIRE dk_type.
#REQUIRE dk_tuple.

(; Impredicative prop ;)

prop : cc.uT.
def Prop : Type := cc.eT prop.
ebP : cc.eT dk_bool.bool -> Prop.

def True : Prop := ebP dk_bool.true.
def False : Prop := ebP dk_bool.false.

imp : Prop -> Prop -> Prop.
def not : Prop -> Prop
        := f : Prop => imp f False.
and : Prop -> Prop -> Prop.
or : Prop -> Prop -> Prop.
def eqv : Prop -> Prop -> Prop
        := f1 : Prop => f2 : Prop => and (imp f1 f2) (imp f2 f1).
forall : A : cc.uT -> (cc.eT A -> Prop) -> Prop.
exists : A : cc.uT -> (cc.eT A -> Prop) -> Prop.

def eeP : Prop -> cc.uT.
def eP : Prop -> Type
       := f : Prop => cc.eT (eeP f).
[f1,f2] eeP (imp f1 f2) --> cc.Arrow (eeP f1) (eeP f2)
[f1,f2] eeP (and f1 f2) --> dk_type.prod (eeP f1) (eeP f2)
[f1,f2] eeP (or f1 f2) --> dk_type.sum (eeP f1) (eeP f2)
[A,f] eeP (forall A f) --> cc.Pi A (x : cc.eT A => eeP (f x))
[A,f] eeP (exists A f) --> dk_type.sigma A (x : cc.eT A => eeP (f x)).



def TrueT : Type := eP True.
def FalseT : Type := eP False.
I : TrueT.
False_elim : A : cc.uT -> FalseT -> cc.eT A.


def and_intro (f1 : Prop) (f2 : Prop) : eP f1 -> eP f2 -> eP (and f1 f2)
    := dk_tuple.cpl (eeP f1) (eeP f2).

def and_elim1 (f1 : Prop) (f2 : Prop) :
              eP (and f1 f2) -> eP f1
    := dk_tuple.fst (eeP f1) (eeP f2).

def and_elim2 (f1 : Prop) (f2 : Prop) :
              eP (and f1 f2) -> eP f2
    := dk_tuple.snd (eeP f1) (eeP f2).

def or_intro1 (f1 : Prop) (f2 : Prop) :
              eP f1 -> eP (or f1 f2)
    := dk_type.left (eeP f1) (eeP f2).

def or_intro2 (f1 : Prop) (f2 : Prop) :
              eP f2 -> eP (or f1 f2)
    := dk_type.right (eeP f1) (eeP f2).

def or_elim (f1 : Prop)
            (f2 : Prop)
            (f3 : Prop) :
            eP (or f1 f2) ->
            eP (imp f1 f3) ->
            eP (imp f2 f3) ->
            eP f3
    := dk_type.sum_elim (eeP f1) (eeP f2) (eeP f3).

(; cut elimination ;)

f1 : Prop.
f2 : Prop.
H1 : eP f1.
H2 : eP f2.
#ASSERT and_elim1 f1 f2 (and_intro f1 f2 H1 H2) == H1.
#ASSERT and_elim2 f1 f2 (and_intro f1 f2 H1 H2) == H2.

f3 : Prop.
H13 : eP (imp f1 f3).
H23 : eP (imp f2 f3).
#ASSERT or_elim f1 f2 f3 (or_intro1 f1 f2 H1) H13 H23 == H13 H1.
#ASSERT or_elim f1 f2 f3 (or_intro2 f1 f2 H2) H13 H23 == H23 H2.

def eqv_intro := f1 : Prop =>
                 f2 : Prop =>
                 and_intro (imp f1 f2) (imp f2 f1).
def eqv_elim1 := f1 : Prop =>
                 f2 : Prop =>
                 and_elim1 (imp f1 f2) (imp f2 f1).
def eqv_elim2 := f1 : Prop =>
                 f2 : Prop =>
                 and_elim2 (imp f1 f2) (imp f2 f1).

def imp_transfer :
      b1 : cc.eT dk_bool.bool ->
      b2 : cc.eT dk_bool.bool ->
      eP (ebP (dk_bool.imp b1 b2)) ->
      eP (imp (ebP b1) (ebP b2))
      :=
        dk_bool.match
          (b1 : cc.eT dk_bool.bool =>
           eeP (forall dk_bool.bool
                  (b2 : cc.eT dk_bool.bool =>
                   imp (ebP (dk_bool.imp b1 b2))
                       (imp (ebP b1) (ebP b2)))))
          (b2 : cc.eT dk_bool.bool =>
           H : eP (ebP b2) =>
           I : TrueT =>
           H)
          (b2 : cc.eT dk_bool.bool =>
           I : TrueT =>
           H : FalseT =>
           False_elim (eeP (ebP b2)) H).

def and_transfer :
      b1 : cc.eT dk_bool.bool ->
      b2 : cc.eT dk_bool.bool ->
      eP (ebP (dk_bool.and b1 b2)) ->
      eP (and (ebP b1) (ebP b2))
      :=
        dk_bool.match
          (b1 : cc.eT dk_bool.bool =>
           eeP (forall dk_bool.bool
                  (b2 : cc.eT dk_bool.bool =>
                   imp (ebP (dk_bool.and b1 b2))
                       (and (ebP b1) (ebP b2)))))
          (b2 : cc.eT dk_bool.bool =>
           H : eP (ebP b2) =>
           and_intro True (ebP b2) I H)
          (b2 : cc.eT dk_bool.bool =>
           H  : FalseT =>
           False_elim (eeP (and False (ebP b2))) H).

def not_transfer :
      b : cc.eT dk_bool.bool ->
      eP (ebP (dk_bool.not b)) ->
      eP (not (ebP b))
      :=
        dk_bool.match
          (b : cc.eT dk_bool.bool =>
           eeP (imp
                 (ebP (dk_bool.not b))
                 (not (ebP b))))
          (H : FalseT => I : TrueT => H)
          (I : TrueT => H : FalseT => H).

def eqv_transfer :
      b1 : cc.eT dk_bool.bool ->
      b2 : cc.eT dk_bool.bool ->
      eP (ebP (dk_bool.eqv b1 b2)) ->
      eP (eqv (ebP b1) (ebP b2))
      :=
        dk_bool.match
          (b1 : cc.eT dk_bool.bool =>
           eeP (forall dk_bool.bool
                  (b2 : cc.eT dk_bool.bool =>
                   imp (ebP (dk_bool.eqv b1 b2))
                       (eqv (ebP b1) (ebP b2)))))
          (b2 : cc.eT dk_bool.bool =>
           H : eP (ebP b2) =>
           eqv_intro
             True
             (ebP b2)
             (I : TrueT => H)
             (H : eP (ebP b2) => I))
          (b2 : cc.eT dk_bool.bool =>
           H : eP (ebP (dk_bool.not b2)) =>
           eqv_intro
             False
             (ebP b2)
             (False_elim (eeP (ebP b2)))
             (not_transfer b2 H)).

def or_transfer :
      b1 : cc.eT dk_bool.bool ->
      b2 : cc.eT dk_bool.bool ->
      eP (ebP (dk_bool.or b1 b2)) ->
      eP (or (ebP b1) (ebP b2))
      :=
        dk_bool.match
          (b1 : cc.eT dk_bool.bool =>
           eeP (forall dk_bool.bool (b2 : cc.eT dk_bool.bool =>
                                     imp (ebP (dk_bool.or b1 b2))
                                         (or (ebP b1) (ebP b2)))))
          (b2 : cc.eT dk_bool.bool =>
           or_intro1 True (ebP b2))
          (b2 : cc.eT dk_bool.bool =>
           or_intro2 False (ebP b2)).

def bool_eqv_refl : b : cc.eT dk_bool.bool ->
                    eP (ebP (dk_bool.eqv b b))
                  := dk_bool.match
                      (b : cc.eT dk_bool.bool => eeP (ebP (dk_bool.eqv b b)))
                      I
                        I.

def bool_and_elim1 : b1 : cc.eT dk_bool.bool ->
                     b2 : cc.eT dk_bool.bool ->
                     eP (ebP (dk_bool.and b1 b2)) ->
                     eP (ebP b1)
                   :=
                     b1 : cc.eT dk_bool.bool =>
                     b2 : cc.eT dk_bool.bool =>
                     H : eP (ebP (dk_bool.and b1 b2)) =>
                     and_elim1
                       (ebP b1)
                       (ebP b2)
                       (and_transfer b1 b2 H).

def bool_and_elim2 : b1 : cc.eT dk_bool.bool ->
                     b2 : cc.eT dk_bool.bool ->
                     eP (ebP (dk_bool.and b1 b2)) ->
                     eP (ebP b2)
                   :=
                     b1 : cc.eT dk_bool.bool =>
                     b2 : cc.eT dk_bool.bool =>
                     H : eP (ebP (dk_bool.and b1 b2)) =>
                     and_elim2
                       (ebP b1)
                       (ebP b2)
                       (and_transfer b1 b2 H).

def bool_or_true : b : cc.eT dk_bool.bool ->
                   eP (ebP (dk_bool.or b dk_bool.true))
                 :=
                   dk_bool.match
                     (b : cc.eT dk_bool.bool => eeP (ebP (dk_bool.or b dk_bool.true)))
                     I
                       I.

def bool_or_false : b : cc.eT dk_bool.bool ->
                    eP (ebP b) ->
                    eP (ebP (dk_bool.or b dk_bool.false))
                  :=
                    dk_bool.match
                      (b : cc.eT dk_bool.bool =>
                       eeP (
                         imp (ebP b)
                             (ebP (dk_bool.or b dk_bool.false))))
                      (I : TrueT => I)
                      (H : FalseT => H).

def bool_or_sym : b1 : cc.eT dk_bool.bool ->
                  b2 : cc.eT dk_bool.bool ->
                  eP (ebP (dk_bool.or b1 b2)) ->
                  eP (ebP (dk_bool.or b2 b1))
                :=
                  dk_bool.match
                    (b1 : cc.eT dk_bool.bool =>
                     eeP (
                       forall dk_bool.bool (b2 : cc.eT dk_bool.bool =>
                                            imp (ebP (dk_bool.or b1 b2))
                                                (ebP (dk_bool.or b2 b1)))))
                    (b2 : cc.eT dk_bool.bool =>
                     I : TrueT =>
                     bool_or_true b2)
                    bool_or_false.

def bool_or_intro1 : b1 : cc.eT dk_bool.bool ->
                     b2 : cc.eT dk_bool.bool ->
                     eP (ebP b1) ->
                     eP (ebP (dk_bool.or b1 b2))
                   :=
                     dk_bool.match
                       (b1 : cc.eT dk_bool.bool =>
                        eeP (
                          forall dk_bool.bool
                            (b2 : cc.eT dk_bool.bool =>
                             imp (ebP b1) (ebP (dk_bool.or b1 b2)))))
                       (b2 : cc.eT dk_bool.bool =>
                        I : TrueT =>
                        I)
                       (b2 : cc.eT dk_bool.bool =>
                        False_elim (eeP (ebP b2))).

def bool_or_intro2 : b1 : cc.eT dk_bool.bool ->
                     b2 : cc.eT dk_bool.bool ->
                     eP (ebP b2) ->
                     eP (ebP (dk_bool.or b1 b2))
                   :=
                     b1 : cc.eT dk_bool.bool =>
                     b2 : cc.eT dk_bool.bool =>
                     H : eP (ebP b2) =>
                     bool_or_sym b2 b1 (bool_or_intro1 b2 b1 H).

def if_uT : b : dk_bool.Bool ->
            cc.uT ->
            cc.uT ->
            cc.uT.
[A] if_uT dk_bool.true A _ --> A
[B] if_uT dk_bool.false _ B --> B.

def booltype_if_elim : b : cc.eT dk_bool.bool ->
                       A : cc.uT ->
                       B : cc.uT ->
                       eP (ebP b) ->
                       cc.eT (if_uT b A B) ->
                       cc.eT A.

[a] booltype_if_elim dk_bool.true _ _ _ a --> a
[A,H] booltype_if_elim dk_bool.false A _ H _ --> False_elim A H.

def booltype_if_intro : b : cc.eT dk_bool.bool ->
                        A : cc.uT ->
                        B : cc.uT ->
                        eP (ebP b) ->
                        cc.eT A ->
                        cc.eT (if_uT b A B).
[a] booltype_if_intro dk_bool.true _ _ _ a --> a
[B,H] booltype_if_intro dk_bool.false _ B H _ --> False_elim B H.

def booltype_ifnot_elim : b : cc.eT dk_bool.bool ->
                          A : cc.uT ->
                          B : cc.uT ->
                          eP (ebP (dk_bool.not b)) ->
                          cc.eT (if_uT b A B) ->
                          cc.eT B.
[a] booltype_ifnot_elim dk_bool.false _ _ _ a --> a
[B,H] booltype_ifnot_elim dk_bool.true _ B H _ --> False_elim B H.

def bool_if_intro : b : cc.eT dk_bool.bool ->
                    H : eP (ebP b) ->
                    A : cc.uT ->
                    a1 : cc.eT A ->
                    a2 : cc.eT A ->
                    P : (cc.eT A -> cc.uT) ->
                    cc.eT (P a1) ->
                    cc.eT (P (dk_bool.ite A b a1 a2)).

[H1] bool_if_intro dk_bool.true _ _ _ _ _ H1 --> H1
[H,a2,P] bool_if_intro dk_bool.false H _ _ a2 P _ --> False_elim (P a2) H.

def bool_if_elim : b : cc.eT dk_bool.bool ->
                   H : eP (ebP b) ->
                   A : cc.uT ->
                   a1 : cc.eT A ->
                   a2 : cc.eT A ->
                   P : (cc.eT A -> cc.uT) ->
                   cc.eT (P (dk_bool.ite A b a1 a2)) ->
                   cc.eT (P a1).
[H1] bool_if_elim dk_bool.true _ _ _ _ _ H1 --> H1
[H,a1,P] bool_if_elim dk_bool.false H _ a1 _ P _ --> False_elim (P a1) H.

def bool_ifnot_intro : b : cc.eT dk_bool.bool ->
                       H : eP (ebP (dk_bool.not b)) ->
                       A : cc.uT ->
                       a1 : cc.eT A ->
                       a2 : cc.eT A ->
                       P : (cc.eT A -> cc.uT) ->
                       cc.eT (P a2) ->
                       cc.eT (P (dk_bool.ite A b a1 a2)).
[H2] bool_ifnot_intro dk_bool.false _ _ _ _ _ H2 --> H2
[H,a1,P] bool_ifnot_intro dk_bool.true H _ a1 _ P _ --> False_elim (P a1) H.

def bool_ifnot_elim : b : cc.eT dk_bool.bool ->
                      H : eP (ebP (dk_bool.not b)) ->
                      A : cc.uT ->
                      a1 : cc.eT A ->
                      a2 : cc.eT A ->
                      P : (cc.eT A -> cc.uT) ->
                      cc.eT (P (dk_bool.ite A b a1 a2)) ->
                      cc.eT (P a2).
[H2] bool_ifnot_elim dk_bool.false _ _ _ _ _ H2 --> H2
[H,a2,P] bool_ifnot_elim dk_bool.true H _ _ a2 P _ --> False_elim (P a2) H.

(; Magic proof ;)
(; Definition of assumed proofs ;)
magic_proof : p : Prop -> eP p.



(; equality ;)
def equal : A : cc.uT -> x : cc.eT A -> y : cc.eT A -> Prop
          := A : cc.uT => x : cc.eT A => y : cc.eT A =>
                                         forall (cc.Arrow A prop)
                                                (H : (cc.eT A -> Prop) =>
                                                 imp (H x) (H y)).
def refl : A : cc.uT -> x : cc.eT A -> eP (equal A x x)
         := A : cc.uT => x : cc.eT A =>
                         H : (cc.eT A -> Prop) =>
                         px : eP (H x) => px.
def equal_ind : A : cc.uT ->
                H : (cc.eT A -> Prop) ->
                x : cc.eT A ->
                y : cc.eT A ->
                eP (equal A x y) ->
                eP (H x) ->
                eP (H y)
              :=
                A : cc.uT =>
                P : (cc.eT A -> Prop) =>
                x : cc.eT A =>
                y : cc.eT A =>
                eq: eP (equal A x y) =>
                eq P.

def equal_sym : A : cc.uT ->
                x : cc.eT A ->
                y : cc.eT A ->
                eP (equal A x y) ->
                eP (equal A y x)
              :=
                A : cc.uT =>
                x : cc.eT A =>
                y : cc.eT A =>
                eq : eP (equal A x y) =>
                equal_ind
                  A
                  (z : cc.eT A => equal A z x)
                  x
                    y
                    eq
                    (refl A x).

def equal_congr :
      A : cc.uT ->
      B : cc.uT ->
      f : (cc.eT A -> cc.eT B) ->
      x : cc.eT A ->
      y : cc.eT A ->
      eP (equal A x y) ->
      eP (equal B (f x) (f y))
      :=
        A : cc.uT =>
        B : cc.uT =>
        f : (cc.eT A -> cc.eT B) =>
        x : cc.eT A =>
        y : cc.eT A =>
        H : eP (equal A x y) =>
        equal_ind A (z : cc.eT A => equal B (f x) (f z)) x y H (refl B (f x)).
